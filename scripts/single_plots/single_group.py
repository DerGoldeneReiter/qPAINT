# Load packages
import numpy as np #numpy data formats and operators
import matplotlib.pyplot as plt #plotting
import matplotlib as mpl
import os #platform independent paths
import importlib
# Load user defined functionsf
import locs_groupprops as l2grp
import file_formats as fifo
import fitfunc
# Reload modules
importlib.reload(l2grp)
importlib.reload(fitfunc)
# Set plot style
plt.style.use(r'E:\Flo\repos\qPAINT\styles\FoM.mplstyle')
#%%
######################################### Read in data
# Define path to locs.hdf5 file

dir_name=r'E:\Projects\qPAINT\data\18-01-12\sample01_p40_convampf_3x_T25_1\JS_18-01-16\ng=400_single'
file_name='sample01_p40_convampf_3x_T25_1_MMStack_Pos0.ome_locs_render_picked.hdf5'

path=os.path.join(dir_name,file_name)
# read in locs files
locs=fifo.read_locs(path)
# Read in .yaml file generated by picasso and get TIF and Localize meta-data
[TIFmeta,LOCmeta]=fifo.read_meta(path)
# Extract NoFrames from meta-data
NoFrames=TIFmeta['Frames'] # Number of frames in tif stack

#%%
######################################### Select group
g=964
locs_g=locs[:][locs['group']==g]

######################################### Parameters for locs_groupprops
ignore_dark=1
NoDocks=1

########################################## Apply locs2groupprops module
# Get tau dynamics according to Jungmann
qTau=l2grp.get_tau(locs_g,ignore_dark,out='all',bright_ignore=True,fit='lin')
# Get trace
trace=l2grp.get_trace(locs_g,NoFrames)
# Get mutiple tau autocorrelation
ac=l2grp.get_ac(locs_g,NoFrames)
# Fit autocorrelation with monoexponential
popt=l2grp.get_ac_fit(locs_g,NoFrames)
norm_factor=popt[0]+popt[2] # Normalization factor for normalization of amplitude to 1
# Dynamics according to ac
[ac_p_inf,ac_tau_b,ac_tau_d]=l2grp.get_ac_tau(locs_g,NoFrames,NoDocks)
[tau_b_misc,tau_d_misc,NoDocks_misc]=l2grp.get_misc_NoDocks(locs_g,NoFrames,ignore_dark,bright_ignore=True,fit='lin')

######################################### PlottinSg
f=plt.figure(num=10,figsize=[9,8])
f.clear()
f.suptitle('Group = %i'%(g))
plt.subplots_adjust(top=0.9, left=0.1, right=0.95,bottom=0.08, wspace=0.4, hspace=0.45)

# Autocorrelation
ax=f.add_subplot(3,2,1)
ax.set_title(r'$\tau_c$ = '+'%.2f, '%(popt[1])+r'$p_{\infty}$ = '+'%.3f, '%(ac_p_inf)+r'$\chi$ = %.3f'%(popt[3]))
ax.plot(ac[1:,0],ac[1:,1]/norm_factor,'bx')
ax.plot(ac[1:,0],fitfunc.ac_monoexp(ac[1:,0],*popt[0:3])/norm_factor,color='red')
ax.set_xscale('log')
ax.set_ylabel('G [a.u]')
# tau_d _ecdf linearized
ax=f.add_subplot(3,2,3)
ax.set_title(r'$\tau_d$ = '+'%.2f'%(qTau['tau_d_mean'][0]))
ax.plot(qTau['tau_d_bins'][0],-np.log(1-qTau['tau_d_cdf'][0]),'x')
ax.plot(qTau['tau_d_bins'][0],qTau['tau_d_bins'][0]/qTau['tau_d_mean'][0])
ax.set_ylabel('-log[1-ECDF(bright)]')
# tau_b ecdf linearized
ax=f.add_subplot(3,2,5)
ax.set_title(r'$\tau_b$ = '+'%.2f'%(qTau['tau_b_mean'][0]))
ax.plot(qTau['tau_b_bins'][0],-np.log(1-qTau['tau_b_cdf'][0]),'x')
ax.plot(qTau['tau_b_bins'][0],qTau['tau_b_bins'][0]/qTau['tau_b_mean'][0])
ax.set_xlabel('Frame')
ax.set_ylabel('-log[1-ECDF(dark)]')
# x vs y
ax=f.add_subplot(3,2,2)
ax.scatter(locs_g['x'][:],locs_g['y'][:],marker='o',alpha=0.1)
ax.set_aspect('equal')
ax.set_title('Localizations')
ax.set_xlabel('x [px]')
ax.set_ylabel('y [px]')
# Photon statistics
ax=f.add_subplot(3,2,4)
ax.hist(locs_g['photons'][:],bins='fd')
ax.set_ylabel('Counts')
ax.set_xlabel('Photons')
# Trace
ax=f.add_subplot(3,2,6)
ax.plot(np.arange(0,NoFrames),trace[0,:],'b-')
ax.set_xlim([0,float(NoFrames)])
ax.set_ylabel('Photons')
ax.set_xlabel('Frame')

plt.show()


#f=plt.figure(num=1)
#f.clear()
#ax=f.add_subplot(1,1,1)
#ax.plot(ac[1:,0],ac[1:,1]/norm_factor,'bx',label='data')
#ax.plot(ac[1:,0],fitfunc.ac_monoexp(ac[1:,0],*popt[0:3])/norm_factor,color='red',label='fit')
#ax.set_xscale('log')
#ax.set_xlim([0.5,float(NoFrames)-80580])
#ax.set_ylim([0,1.1])
#ax.set_ylabel('G [a.u.]')
#ax.set_xlabel(r'$\tau$ [frames]')
#ax.legend()

#f=plt.figure(num=2)
#f.clear()
#ax=f.add_subplot(1,1,1)
#ax.plot(qTau['tau_d_bins'][0],-np.log(1-qTau['tau_d_cdf'][0]),'x',label='data')
#ax.plot(qTau['tau_d_bins'][0],qTau['tau_d_bins'][0]/qTau['tau_d_mean'][0],label='fit')
#ax.set_ylabel(r'-ln[1-ECDF($\tau_d$)]')
#ax.set_xlabel('Time [frames]')
#ax.legend(loc=2)
#
#f=plt.figure(num=3)
#f.clear()
#ax=f.add_subplot(1,1,1)
#ax.plot(qTau['tau_b_bins'][0],-np.log(1-qTau['tau_b_cdf'][0]),'x',label='data')
#ax.plot(qTau['tau_b_bins'][0],qTau['tau_b_bins'][0]/qTau['tau_b_mean'][0],label='fit')
#ax.set_ylabel(r'-ln[1-ECDF($\tau_b$)]')
#ax.set_xlabel('Time [frames]')
#ax.legend(loc=2)
#
#f=plt.figure(num=4)
#f.clear()
#plt.subplots_adjust(left=0.2)
#ax=f.add_subplot(1,1,1)
#ax.plot(np.arange(0,NoFrames),trace[0,:]+6000,'b-')
#ax.plot(np.arange(0,NoFrames),np.sign(np.float16(trace[0,:]))*5000,'r-')
#ax.set_ylabel('Photons')
#ax.set_xlabel('Time')
#ax.set_xlim([1680,1865])
#ax.set_ylim([-1000,19900])
