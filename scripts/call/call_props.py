#Call script to module: pickprops
#
############################################################# Set parameters
ignore=0
NoPartitions=80
savename_ext='_props'
omit=True
###### Dictonary content for .yaml file
props_dict={'Generated by':'pickprops.get_props',
            'ignore':ignore} # Add your comments in same manner

############################################################## Define data
# Define folder of locs_picked.hdf5 file
dir_names=[]
dir_names.extend(['/fs/pool/pool-schwille-paint/Data/p04.lb-FCS/z.simulations/18-12-17_FS_copasi_errors/N6_kon1-5e6_koff0-21Hz_f18k_exp200']*10)
# Define names of locs_picked.hdf5 file
file_names=[]
file_names.extend(['4nM-01_locs_picked.hdf5'])
file_names.extend(['4nM-02_locs_picked.hdf5'])
file_names.extend(['4nM-03_locs_picked.hdf5'])
file_names.extend(['4nM-04_locs_picked.hdf5'])
file_names.extend(['4nM-05_locs_picked.hdf5'])
file_names.extend(['4nM-06_locs_picked.hdf5'])
file_names.extend(['4nM-07_locs_picked.hdf5'])
file_names.extend(['4nM-08_locs_picked.hdf5'])
file_names.extend(['4nM-09_locs_picked.hdf5'])
file_names.extend(['4nM-10_locs_picked.hdf5'])
#################################################### Load packages
import os #platform independent paths
import importlib
# Load user defined functions
import pickprops as props
import var_io as io
# Reload modules
importlib.reload(props)
importlib.reload(io)
#%%
############################################################# Read locs, apply props & save locs
######### Create list of paths
path=[os.path.join(dir_names[i],file_names[i]) for i in range(0,len(file_names))]

######### Read-Apply-Save loop
for p in path:
    ######### File read in
    locs,locs_yaml=io.read_locs(p)
#    locs=locs.loc[locs['group']<100]
    
    ######### Get number of frames
    NoFrames=locs_yaml[0]['Frames']
    
    ######### Apply non-parallelized props
#    locs_props=props.apply_props(locs,NoFrames,ignore)
    
    ######### Apply parallelized props
    locs_props=props.apply_props_dask(locs,NoFrames,ignore,NoPartitions)
   
    ######### Drop objects for saving if omit=True
    if omit:
        locs_props=locs_props.drop(['trace','tau','g','tau_b_dist','tau_d_dist'],axis=1)
        
    ######### Save .hdf5 and .yaml of locs_props    
    io.save_locs(locs_props,[locs_yaml,props_dict],p,savename_ext)
