#Call script to module: pickprops
#
############################################################# Set parameters
conc=[2.5,2.5,10,10,10] # Imager concentration [nM]
ignore=1 
NoPartitions=20
savename_ext='_props_ig%i'%(ignore)
omit=True
###### Dictonary content for .yaml file
props_dict={'Generated by':'pickprops.get_props',
            'ignore':ignore} # Add your comments in same manner

############################################################## Define data
dir_names=[] 
dir_names.extend(['/fs/pool/pool-schwille-paint/Data/p04.lb-FCS/19-02-05_2pt-c-series-varN_POC/id045-N12-Pm2-8nt_c2_5nM_p35uW_1/19-02-05_JS']*2)
dir_names.extend(['/fs/pool/pool-schwille-paint/Data/p04.lb-FCS/19-02-05_2pt-c-series-varN_POC/id045-N12-Pm2-8nt_c10nM_35uW_1/19-02-06_JS']*2)
dir_names.extend(['/fs/pool/pool-schwille-paint/Data/p04.lb-FCS/19-02-05_2pt-c-series-varN_POC/id045-N12-Pm2-8nt_c10nM_p35uW_1/19-02-05_JS'])

# Define names of locs_picked.hdf5 file
file_names=[]
file_names.extend(['id046-N12-Pm2-8nt_c2_5nM_p35uW_1_MMStack_Pos0.ome_locs_test_picked.hdf5'])
file_names.extend(['id046-N12-Pm2-8nt_c2_5nM_p35uW_1_MMStack_Pos0.ome_locs_picked.hdf5'])
file_names.extend(['id046-N12-Pm2-8nt_c10nM_35uW_1_MMStack_Pos0.ome_locs_picked.hdf5'])
file_names.extend(['id046-N12-Pm2-8nt_c10nM_35uW_1_MMStack_Pos0.ome_locs_test_picked.hdf5'])
file_names.extend(['id046-N12-Pm2-8nt_c10nM_p35uW_1_MMStack_Pos0.ome_locs_render_picked.hdf5'])
#################################################### Load packages
import os #platform independent paths
import importlib
# Load user defined functions
import pickprops as props
import var_io as io
# Reload modules
importlib.reload(props)
importlib.reload(io)
#%%
############################################################# Read locs, apply props & save locs
######### Create list of paths
path=[os.path.join(dir_names[i],file_names[i]) for i in range(0,len(file_names))]

######### Read-Apply-Save loop
for i in range(0,len(path)):
    ######### File read in
    locs,locs_yaml=io.read_locs(path[i])
    
    ######### Get number of frames
    NoFrames=locs_yaml[0]['Frames']
    
    ######### Apply non-parallelized props
#    locs_props=props.apply_props(locs,conc[i],NoFrames,ignore)
    
    ######### Apply parallelized props
    locs_props=props.apply_props_dask(locs,conc[i],NoFrames,ignore,NoPartitions)
   
    ######### Drop objects for saving if omit=True
    if omit:
        locs_props=locs_props.drop(['trace','tau','g','tau_b_dist','tau_d_dist'],axis=1)
        
    ######### Save .hdf5 and .yaml of locs_props    
    io.save_locs(locs_props,[locs_yaml,props_dict],path[i],savename_ext)

#%%
#import matplotlib.pyplot as plt
#import varfuncs
#import numpy as np
#
#f=plt.figure(num=11,figsize=[4,3])
#f.subplots_adjust(bottom=0.1,top=0.99,left=0.2,right=0.99)
#f.clear()
#
##### Autocorrelation
#ax=f.add_subplot(311)
#for g in [8]:
#    ax.plot(locs_props.loc[g,'tau'],
#            varfuncs.ac_monoexp(locs_props.loc[g,'tau'],locs_props.loc[g,'mono_A'],locs_props.loc[g,'mono_tau']),
#            '-',lw=2,c='r')
#    ax.plot(locs_props.loc[g,'tau'],locs_props.loc[g,'g'])
#    ax.axhline(1,ls='--',lw=2,color='k')
#ax.set_xscale('log')
##### Trace
#ax=f.add_subplot(312)
#ax.plot(locs_props.loc[g,'trace'])
##### tau_d_dist
#ax=f.add_subplot(313)
#x=varfuncs.get_ecdf(locs_props.loc[g,'tau_d_dist'])[0]
#y=varfuncs.get_ecdf(locs_props.loc[g,'tau_d_dist'])[1]
#x_fit=np.arange(0,np.max(x),0.1)
#ax.plot(x,y)
#ax.plot(x_fit,varfuncs.ecdf_exp(x_fit,locs_props.loc[g,'tau_d']))