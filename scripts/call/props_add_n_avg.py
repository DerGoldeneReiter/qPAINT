############################################################## Enter paramters here
pick_diameter=1.5 # Radius in which to search for single picks
fieldname='n_avg' # Name to which single pick count are assigned
savename_ext='_avgcount' # File extension of resulting props_file
n_events_crit=10

labels=['AC','SR'] # First path leads to AC file second to single picks SR file
############################################################## Define data paths
dir_names=[]
dir_names.extend(['/fs/pool/pool-schwille-paint/Data/p04.lb-FCS/19-02-18_2pt_N6-gel_newB+/N6_DATA/N6_align']*2)
file_names=[]
file_names.extend(['2_5nM_p35uW_locs_render_align_picked_avg3_render_picked_props_ig1.hdf5'])
file_names.extend(['2_5nM_50deg_locs_render_align_picked_filter_avg3_picked-single-all_props_ig1.hdf5'])

#################################################### Load packages & Function definitions
import numpy as np #numpy data formats and operators
import matplotlib.pyplot as plt #plotting
import os #platform independent paths
import pandas as pd 
import importlib
from tqdm import tqdm
# Load user defined functions
import var_io as io
import varfuncs
import pickprops_calls as props_call
importlib.reload(props_call)
importlib.reload(varfuncs)
plt.style.use('~/qPAINT/styles/FoM.mplstyle')

#### Function for counting SR single picks in AC origami pick
def count_singles_in_pick(df,x,y,pick_diameter):
        #### Coordinates and id of reference group
        x0=df.mean_x.values # x-coordinate
        y0=df.mean_y.values # y coordinate
        
        #### Get radial distance to center of group for every single pick
        r=np.sqrt((x-x0)**2+(y-y0)**2) # Radial distance
        n_avg=len(r[r<float(pick_diameter/2)]) # How many single picks are within pick_diameter from center of pick

        return n_avg


############################################################ Read in locs
#### Create list of paths
path=[os.path.join(dir_names[i],file_names[i]) for i in range(0,len(file_names))]
#### Read in locs of path
locs_props=pd.concat([io.read_locs(p)[0] for p in path],keys=labels,names=['expID'])
locs_props.reset_index(inplace=True)

############################################################# Filter SR-single picks
X=locs_props.copy()
X.drop(X.loc[(X.expID=='SR')&(X.n_events<n_events_crit)].index,inplace=True)

#### Show distribution of n_events and n_locs in histogram
f=plt.figure(num=10,figsize=[7,8])
f.subplots_adjust(left=0.1,right=0.99,bottom=0.04,top=0.95)
ax=f.add_subplot(111)
f.clear()
X.loc[X.expID=='SR',['n_locs','n_events']].hist(bins=51,ax=ax)

#%%
############################################################ Count single SR picks in AC and assign o props of AC
tqdm.pandas() # For progressbar under apply
x=X.loc[X.expID=='SR','mean_x']
y=X.loc[X.expID=='SR','mean_y']
X.loc[X.expID=='AC',fieldname]=X.loc[X.expID=='AC',:].groupby('group').progress_apply(lambda df: count_singles_in_pick(df,x,y,pick_diameter))
#### Drop single picks and expID
X.drop(X.loc[X.expID=='SR'].index,inplace=True)
X.drop(['expID'],axis='columns',inplace=True)
X.set_index(['group'],inplace=True)
##### Show distribution of n_events and n_locs in histogram
f=plt.figure(num=10,figsize=[7,8])
f.subplots_adjust(left=0.1,right=0.99,bottom=0.04,top=0.95)
f.clear()
ax=f.add_subplot(111)
ax.hist(X[fieldname],bins=np.arange(-.5,8.5,1),align='mid',rwidth=0.8)

############################################################ File saving
X_dict=io.read_locs(path[labels=='AC'])[1]
X_dict.extend([{'Generated by': '/scripts/call/props_add_n_avg',
                'Single file':path[labels=='SR'],
                'n_events_crit':n_events_crit,
                'pick_diameter':pick_diameter}])
io.save_locs(X,X_dict,path[labels=='AC'],savename_ext=savename_ext)