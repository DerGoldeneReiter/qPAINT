import yaml
import pandas as pd
import h5py
import numpy as np

#%%
def read_locs(readpath):
    """
    Returns localization .hdf5 from picasso as pandas.DataFrame and corresponding .yaml as list of dictionaries.
    
    Parameters
    ---------
    readpath : str
        Path to .hdf5 file as generated by Picasso   
    Returns
    -------
    locs : pandas.DataFrame
        Localization list stored under 'locs' in .hdf5 file
    locs_yaml : list
        list of dictionaries contained in .yaml corresponding to .hdf5 file
    """
    with pd.HDFStore(readpath,'r') as store:
        locs=store['locs']
        
    ### Get corresponding .yaml file
    locs_yaml=read_yaml(readpath)
    
    return locs,locs_yaml

#%%
def save_locs(df,df_dict,origin_path,savename_ext='_props'):
    """
    Save processed df of locs file belonging to origin_path in .hdf5 file and corresponding list of dictionaries in .yaml file.
    
    Parameters
    ---------
    df: pandas.DataFrame
        Processed df of a Picasso's locs file 
    df_dict: list(dict1,dict2,...)
        List of dictionaries belonging to df, will be stored in .yaml
    origin_path : str
        Path of original Picass's locs file that was processed
    savename_ext: str
        Extension to origin_path, will be inserted right before file type extension '.hdf5'. If omitted defaults to '_props'
    """
    ### Check if savename_ext is not an empty string to prevent replacing original container 
    if savename_ext=='':
        savename_ext='_XX'
    ### Add savename_ext to path of original file that was processed to create savepath  
    savepath=origin_path.replace('.hdf5',savename_ext+'.hdf5')
    
    with pd.HDFStore(savepath,'w') as store:
        store.put('locs', df, format='fixed')
    
    ### Save dict corresponding to processed df in .yaml
    create_yaml(df_dict,savepath.replace('.hdf5','.yaml'))
    
    return
#%%
def read_yaml(readpath):
    """
    Read .yaml file generated by Picasso and return as list of dictionaries.
    
    Parameters
    ---------
    readpath: str
        path to .yaml file
        
    Returns
    --------
    dict_list: list(dict)
        List of dictionaries in .yaml file
    """
    
    stream=open(str.replace(readpath,'.hdf5','.yaml'))
    doc=yaml.load_all(stream)
    
    dict_list=[]
    i=0
    for data in doc:
        dict_single=data
        dict_list.append(dict_single)
        i=i+1
    
    stream.close()
    
    return dict_list
#%%
def create_yaml(dict_list,savepath):    
    """
    Save list of dictionaries .yaml file generated by Picasso and return as list of dictionaries.
    
    Parameters
    ---------
    dict_list: list(dict)
        List of dictionaries
    savepath: str
        Path saving name for .yaml file
    """
    with open(str.replace(savepath,'.hdf5','.yaml'),'w') as yaml_file:
        # Dump first dict without explicit start
        yaml.dump(dict_list[0],yaml_file,default_flow_style=False)
        # Dump all other dicts with explicit start
        for i in range(1,len(dict_list)): 
            yaml.dump(dict_list[i],yaml_file,default_flow_style=False,explicit_start=True)
        
    return
#%%
def save_locs_recarray(rec,rec_dict,origin_path,savename_ext='_filter'):
    """
    Save processed rec of locs file belonging to origin_path in .hdf5 file and corresponding list of dictionaries in .yaml file.
    
    Parameters
    ---------
    rec: pandas.DataFrame
        Processed df of a Picasso's locs file 
    rec_dict: list(dict1,dict2,...)
        List of dictionaries belonging to rec, will be stored in .yaml
    origin_path : str
        Path of original Picasso's locs file that was processed
    savename_ext: str
        Extension to origin_path, will be inserted right before file type extension '.hdf5'. If omitted defaults to '_filter'
    """
    ### Check if savename_ext is not an empty string to prevent replacing original container 
    if savename_ext=='':
        savename_ext='_XX'
    ### Add savename_ext to path of original file that was processed to create savepath  
    savepath=origin_path.replace('.hdf5',savename_ext+'.hdf5')
    
    with h5py.File(savepath,"w") as store:
        dset=store.create_dataset("locs", np.shape(rec), dtype=rec.dtype)
        dset[...]=rec
    
    ### Save dict corresponding to processed df in .yaml
    create_yaml(rec_dict,savepath.replace('.hdf5','.yaml'))
    
    return

