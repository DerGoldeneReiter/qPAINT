import h5py as h5py #hdf5 handling
import numpy as np #numpy data formats and operators
import matplotlib.pyplot as plt #plotting
import importlib
import sys
from tqdm import tqdm
import importlib

import file_formats as fifo
importlib.reload(fifo)

#%%
def single_dock(tau_b,tau_d,NoFrames):
    # Initiate empty lists for loop    
    locs_frame=[]
    locs_photons=[]    
    on_frames=[]
    off_frames=[]
    frame=int(np.rint(np.random.exponential(tau_d))) # Start time with off event 
    
    while True:
        # Create on-event of duration on_frame (exponentially distributed)
        on_frame=int(np.rint(np.random.exponential(tau_b)))
        # Store on_event in on_frames
        on_frames.extend([on_frame])
        
        # Create localization-list of on-event 
        locs_list=list(range(frame,frame+on_frame))
        # Create poisson distributed photons for each localization
        photons_list=list(np.random.poisson(100,size=np.shape(locs_list)))
        
        # Store localization-list in locs_frame
        locs_frame.extend(locs_list)
        # Store photons-list in locs_photons
        locs_photons.extend(photons_list)
        
        # Create off-event of duration on_frame (exponentially distributed)
        off_frame=int(np.rint(np.random.exponential(tau_d)))
        # Store on_event in on_frames
        off_frames.extend([off_frame])
        
        # Set frame to end frame of current on-off event iteration
        frame=frame+on_frame+off_frame 
        
        if frame>=NoFrames: # End loop if it extends over NoFrames
            break    
    
    # Convert to numpy arrays    
    locs_frame=np.array(locs_frame)
    locs_photons=np.array(locs_photons)
    on_frames=np.array(on_frames)
    off_frames=np.array(off_frames)
    
    # Make sure that locs_frames<NoFrames
    istrue_smallerNoFrames=locs_frame<NoFrames
    # Restrict locs_frame and locs_photons to frames <= NoFrames
    locs_frame=locs_frame[istrue_smallerNoFrames]
    locs_photons=locs_photons[istrue_smallerNoFrames]
    
    # Create empty locs file
    locs=np.zeros(np.size(locs_frame),dtype=[('frame','i4',1),('photons','i4',1)])
    # Add frames and phtons from simulation to locs
    locs['frame']=locs_frame
    locs['photons']=locs_photons
    
    return locs

#%%
def single_group(tau_b,tau_d,NoFrames,NoDocks,group):
    # Initiate locs_d as comined locs of NoDocks docking sites
    locs_d=single_dock(tau_b,tau_d,NoFrames)
    # Loop over docking sites
    for d in range(1,NoDocks):
        locs_d=np.append(locs_d,single_dock(tau_b,tau_d,NoFrames),axis=0)
    # Sort locs_d according to frames 
    locs_d.sort(order=['frame'],axis=0)
    
    # Get unique frames and counts
    frames,frames_count=np.unique(locs_d['frame'],return_counts=True)
    
    # Initialize locs of size of unique frames
    locs=np.zeros(np.size(frames),dtype=[('frame','i4',1),('photons','i4',1),('x','f4',1),('y','f4',1),('group','i4',1)])
    
    # 
    for i in range(0,np.size(frames)):
        # Assign frame to locs
        locs['frame'][i]=frames[i]
        if frames_count[i]==1:
            locs['photons'][i]=locs_d['photons'][locs_d['frame']==frames[i]]
        elif frames_count[i]>1:
            locs['photons'][i]=np.sum(locs_d['photons'][locs_d['frame']==frames[i]])
     
    # Add group field to locs
    locs[:]['group']=group
    return locs
            
#%%
def simulate_locs(path,tau_b,tau_d,NoFrames,NoDocks,NoGroups):
    # Add .hdf5 file ending to path
    path=path+'_locs_picked.hdf5'
    
    # Initiate locs structured array by calling it for first group
    locs=single_group(tau_b,tau_d,NoFrames,NoDocks,0)
    
    for g in tqdm(range(1,NoGroups)):
        locs_g=single_group(tau_b,tau_d,NoFrames,NoDocks,g)
        locs=np.hstack([locs,locs_g])
    
    # Save locs in hdf5 file
    locs_file = h5py.File(path, "w")
    dset=locs_file.create_dataset("locs", np.shape(locs), dtype=locs.dtype)
    dset[...]=locs
    locs_file.close() 
    
    # Create .yaml file containing meta data
    TIFdict={'Camera': 'Simulation',
             'Frames': NoFrames,
             'Docking Sites': NoDocks,
             'Generated by': 'simulate_locs',
             'PAINT.taud':tau_d,
             'PAINT.taub':tau_b,
             'NoGroups':NoGroups}
    LOCdict={'Generated by':'simulate_locs'}
    fifo.create_meta_simulate(path,TIFdict,LOCdict)
    
           

    return locs
          
    